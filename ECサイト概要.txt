ECサイト「Kagoyume」の作成

・概要
商品の検索や、結果の詳細から「買い物かごに追加」のできるECサイト
ログイン、会員登録ができ、ログイン状態により画面表示＆遷移が若干変化する
商品の情報はYahooAPIを用いて取得する
買い物かごから購入画面へと遷移できる
実際に購入は出来ない

・設計
・DB
テーブル
buy_t
カラム
buyID(int)(primarykey)(auto_increment)
userID(int)
itemCode(varchar)
type(int)
buyDate(datetime)

テーブル
user_t
カラム
userID(int)(primarykey)(auto_increment) (外部キー)
name(varchar)
password(varchar)
mail(varchar)
address(text) 
total(int)
newDate(datetime)
deleteFlg(int)


共通の項目
全てのページに、「ログイン」を表示。
ログイン済みの場合、「ログイン」の代わりに「ログアウト」と「買い物かご」を表示。
さらに、「ようこそ(ユーザー名[クリック可能])さん」を表示。

top（トップページ）
このシステムの簡単な説明が記載されている。
キーワード検索フォームが設置されている。検索の遷移先はsearchで、GETメソッド。
未入力ならエラーを表示

search（結果一覧）
topから検索により遷移できる。
YahooショッピングAPIに直接検索キーワードを渡し、その結果を受け取り＆表示している
検索キーワード、検索結果数を表示
縦のリスト型に表示。サムネイルと、その横に商品名、金額が載っている。
クリックでitemへ

item（商品詳細ページ）
serchまたはcartから遷移できる。商品IDをGETメソッドにより受け渡す
YahooショッピングAPIから取得したデータで、より詳細な情報(概要や評価値)、が表示される
「カートに追加する」ボタンがあり、クリックするとaddに遷移する。

add（カートへ商品を追加）
商品の情報を受け取り、クッキーやセッションに追加する
画面には「カートに追加しました」という文言が出てくる。

login（ログインページ）
どのページからも遷移できる。ログインしているかいないかで処理が分岐する
ログインしていない状態(各ページの「ログイン」というリンクから)で遷移してきた場合は、
ユーザー名とパスワードを入力するフォームが表示される。
また、「新規会員登録」というリンクも表示される。
ログインに成功すると、その情報をログイン状態を管理できるセッションに書き込み、
そのまま直前まで閲覧していたページに遷移する
ログインしている状態で(各ページの「ログアウト」というリンクから)遷移してきた場合は、
ログアウト処理を行う(セッションの破棄、クッキーに保存されたセッションIDを破棄)その後topへ
ユーザーデータの削除フラグが1の場合は削除されたユーザーとして処理すること

registration（会員登録 - 入力画面）
loginからのみ遷移
フォームがあり、入力するのは以下の要素
ユーザー名
パスワード
メールアドレス
住所
registrationconfirmから戻ってきた場合は、値を保持して記入済みにできる

registration_confirm（会員登録 - 確認画面）
フォームで入力された文字や選択を表示し、「上記の内容で登録いたします。よろしいですか？」と表示。
「はい」でregistration_complete「いいえ」でregistrationに値を保持したまま(戻った時にフォーム入力済みになっている)遷移
もし入力が不足していた場合はどの項目のデータが不足しているのかを表示。

cart（カートページ）
「カートに追加」でクッキーやセッションに保存された登録情報が登録古い順に表示される
商品の写真と名前(リンクつき)、金額を表示。
画面下部に全額の合計金額を表示する
「購入する」ボタンあり
各商品には「削除」のリンクあり。このリンクをクリックすることで、カートから商品を削除する
カートの中身はユーザー毎に切り替えられる
ログインしていない状態ならばログインページに遷移、そこでログインに成功した場合、
非ログイン状態で「カートに追加」操作をしていた商品はそのユーザー用のカートに移る

buy_confirm（購入 - 確認画面）
カートに追加順で商品の名前(リンクなし)、金額が表示される
合計金額が表示され、その下に発送方法を選択するラジオボタンがある。
「上記の内容で購入する」ボタンと「カートに戻る」ボタンがある。

buy_complete（購入 - 完了画面）
購入データを保存
総購入金額を更新
「購入が完了しました」と表示

mydata（会員情報 - 閲覧画面）
登録したユーザー情報が閲覧できる(ユーザーID以外全て)
購入履歴へのリンクあり
登録情報を更新する、削除するリンクあり

myupdate（会員情報 - 更新画面）
フォームから入力するデータで既にあるデータを更新できる
画面構成はregistrationと同じ。フォーム内に直接記入された状態である。
このフォームの内容を書き換えていくことでデータの更新ができる

myupdate_result（会員情報 - 更新完了画面）
IDなどを受け取り、DBを更新。
「以上の内容で更新しました。」と、フォームで入力された値を表示

mydelete（会員情報 - 削除画面）
対象のレコードの全データを表示したのちに、「このユーザーを削除しますか？」という質問があり、
「はい」ならmydelete_resultへ、そうでないならトップページへ遷移する

mydelete_result（会員情報 - 削除完了画面）
ここにアクセスした段階で、IDによる削除が実行される
(外部キー制約により直接DELETEは出来ないので、削除フラグを0から1に変更する)
「削除しました」という一文が表示される

UserDataDTO.java（共通 - ユーザー情報保持クラス）
ユーザー情報を格納するBeansオブジェクト。型やフィールド名がDBと連携している
データベースからの格納、取り出しで取得されたデータを最初に格納する

UserDataDAO.java（共通 - ユーザー情報DB処理）
データベース処理系全般をつかさどるオブジェクト
基本的にデータはUserDataDTO経由

UserData.java（共通 - ユーザー情報クラス）
フォームからの入出力されるデータを格納するBeansオブジェクト
DTOからの変換、逆に、DTOへの変換を行うメソッドを保持する